#include "LevelSystem.h"
#include <fstream>

using namespace std;
using namespace sf;

std::map<LevelSystem::Tile, sf::Color> LevelSystem::_colours{
    {WALL, Color::White}, {END, Color::Red}};

sf::Color LevelSystem::getColor(LevelSystem::Tile t) {
  auto it = _colours.find(t);
  if (it == _colours.end()) {
    _colours[t] = Color::Transparent;
  }
  return _colours[t];
}

void LevelSystem::setColor(LevelSystem::Tile t, sf::Color c) {
  _colours[t] = c;
}

std::unique_ptr<LevelSystem::Tile[]> LevelSystem::_tiles;
size_t LevelSystem::_width;
size_t LevelSystem::_height;

float LevelSystem::_tileSize(128.f);
Vector2f LevelSystem::_offset(0.0f, 0.0f);
// Vector2f LevelSystem::_offset(0,0);
vector<std::unique_ptr<sf::RectangleShape>> LevelSystem::_sprites;

void LevelSystem::loadLevelFile(const std::string& path, float tileSize) {
  _tileSize = tileSize;
  size_t w = 0, h = 0;
  string buffer;

  // Load in file to buffer
  ifstream f(path);
  if (f.good()) {
    f.seekg(0, std::ios::end);
    buffer.resize(f.tellg());
    f.seekg(0);
    f.read(&buffer[0], buffer.size());
    f.close();
  } else {
    throw string("Couldn't open level file: ") + path;
  }

  std::vector<Tile> temp_tiles;
  int widthCheck = 0;
  for (int i = 0; i < buffer.size(); ++i) {
    const char c = buffer[i];
    if (c == '\0') {  break; }
    if (c == '\n') { // newline
      if (w == 0) {  // if we haven't written width yet
        w = i;       // set width
      } else if (w != (widthCheck - 1)) {
        throw string("non uniform width:" + to_string(h) + " ") + path;
      }
      widthCheck = 0;
      h++; // increment height
    } else {
      temp_tiles.push_back((Tile)c);
    }
    ++widthCheck;
  }

  if (temp_tiles.size() != (w * h)) {
    throw string("Can't parse level file") + path;
  }
  _tiles = std::make_unique<Tile[]>(w * h);
  _width = w; // set static class vars
  _height = h;
  std::copy(temp_tiles.begin(), temp_tiles.end(), &_tiles[0]);
  cout << "Level " << path << " Loaded. " << w << "x" << h << std::endl;
  buildSprites();
}

void LevelSystem::generateDungeon(int level)
{
	int layout[25] = { 16,7,8,-1,-1,
						11,13,11,3,-1,
						6,14,10,12,8,
						-1,11,4,14,9,
						-1,0,-1,15,-1 };

	std::vector<Tile> temp_tiles;
	temp_tiles.clear();

	srand(time(NULL));

	int* tCluster;

	for (int dRow = 0; dRow < 5; dRow++)
	{
		int cOffset = rand() % 12;

		for (int cRow = 0; cRow < 3; cRow++)
		{
			int offset = rand() % 10;

			for (int rRow = 0; rRow < 9; rRow++)
			{
				for (int dCol = 0; dCol < 5; dCol++)
				{
					if (layout[dCol + dRow * 5] > 14)
					{
						tCluster = _specialClusters[layout[dCol + dRow * 5] - 15];
					}
					else if (layout[dCol + dRow * 5] > -1)
					{
						int rando = ((dCol + dRow + cOffset) % 4);
						tCluster = _clusters[layout[dCol + dRow * 5]][rando];
					}					

					for (int cCol = 0; cCol < 3; cCol++)
					{
						int rando = ((cCol + cRow + offset) % 4);

						for (int rCol = 0; rCol < 9; rCol++)
						{
							if (layout[dCol + dRow * 5] > 15)
							{
								if (layout[dCol + dRow * 5] == -1 || tCluster[cCol + cRow * 3] == -1 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == -1)
								{
									temp_tiles.push_back(EMPTY);
								}
								else if (_specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 72 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 73 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 74 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 85 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 86)
								{
									temp_tiles.push_back(END);
								}
								else
								{
									temp_tiles.push_back(WALL);
								}
							}
							else
							{
								if (layout[dCol + dRow * 5] == -1 || tCluster[cCol + cRow * 3] == -1 || _rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == -1)
								{
									temp_tiles.push_back(EMPTY);
								}
								else if (_rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 72 || _rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 73 || _rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 74 || _rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 85 || _rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 86)
								{
									temp_tiles.push_back(END);
								}
								else if (_rooms[tCluster[cCol + cRow * 3]][rando][rCol + rRow * 9] == 84)
								{
									temp_tiles.push_back(START);
								}
								else
								{
									temp_tiles.push_back(WALL);
								}
							}
						}
					}
				}
			}
		}
	}

	int count = temp_tiles.size();

	cout << temp_tiles.size() << endl;
	_tiles = std::make_unique<Tile[]>(count);
	_width = 5*27; //set static class vars
	_height = 5*27;
	std::copy(temp_tiles.begin(), temp_tiles.end(), &_tiles[0]);
	std::cout << "Level " << level << " Loaded. " << 27 << "x" << 27 << std::endl;
	buildSprites();
}

void LevelSystem::buildSprites(bool optimise) {
  _sprites.clear();

  struct tp {
    sf::Vector2f p;
    sf::Vector2f s;
    sf::Color c;
  };
  vector<tp> tps;
  const auto tls = Vector2f(_tileSize, _tileSize);
  for (size_t y = 0; y < _height; ++y) {
    for (size_t x = 0; x < _width; ++x) {
      Tile t = getTile({x, y});
      if (t == EMPTY) {
        continue;
      }
      tps.push_back({getTilePosition({x, y}), tls, getColor(t)});
    }
  }

  const auto nonempty = tps.size();

  // If tile of the same type are next to each other,
  // We can use one large sprite instead of two.
  if (optimise && nonempty) {

    vector<tp> tpo;
    tp last = tps[0];
    size_t samecount = 0;

    for (size_t i = 1; i < nonempty; ++i) {
      // Is this tile compressible with the last?
      bool same = ((tps[i].p.y == last.p.y) &&
                   (tps[i].p.x == last.p.x + (tls.x * (1 + samecount))) &&
                   (tps[i].c == last.c));
      if (same) {
        ++samecount; // Yes, keep going
        // tps[i].c = Color::Green;
      } else {
        if (samecount) {
          last.s.x = (1 + samecount) * tls.x; // Expand tile
        }
        // write tile to list
        tpo.push_back(last);
        samecount = 0;
        last = tps[i];
      }
    }
    // catch the last tile
    if (samecount) {
      last.s.x = (1 + samecount) * tls.x;
      tpo.push_back(last);
    }

    // No scan down Y, using different algo now that compressible blocks may
    // not be contiguous
    const auto xsave = tpo.size();
    samecount = 0;
    vector<tp> tpox;
    for (size_t i = 0; i < tpo.size(); ++i) {
      last = tpo[i];
      for (size_t j = i + 1; j < tpo.size(); ++j) {
        bool same = ((tpo[j].p.x == last.p.x) && (tpo[j].s == last.s) &&
                     (tpo[j].p.y == last.p.y + (tls.y * (1 + samecount))) &&
                     (tpo[j].c == last.c));
        if (same) {
          ++samecount;
          tpo.erase(tpo.begin() + j);
          --j;
        }
      }
      if (samecount) {
        last.s.y = (1 + samecount) * tls.y; // Expand tile
      }
      // write tile to list
      tpox.push_back(last);
      samecount = 0;
    }

    tps.swap(tpox);
  }

  for (auto& t : tps) {
    auto s = make_unique<sf::RectangleShape>();
    s->setPosition(t.p);
    s->setSize(t.s);
    s->setFillColor(Color::Red);
    s->setFillColor(t.c);
    // s->setFillColor(Color(rand()%255,rand()%255,rand()%255));
    _sprites.push_back(move(s));
  }

  cout << "Level with " << (_width * _height) << " Tiles, With " << nonempty
       << " Not Empty, using: " << _sprites.size() << " Sprites\n";
}

void LevelSystem::render(RenderWindow& window) {
  for (auto& t : _sprites) {
    window.draw(*t);
  }
}

LevelSystem::Tile LevelSystem::getTile(sf::Vector2ul p) {
  if (p.x > _width || p.y > _height) {
    throw string("Tile out of range: ") + to_string(p.x) + "," +
        to_string(p.y) + ")";
  }
  return _tiles[(p.y * _width) + p.x];
}

size_t LevelSystem::getWidth() { return _width; }

size_t LevelSystem::getHeight() { return _height; }

sf::Vector2f LevelSystem::getTilePosition(sf::Vector2ul p) {
  return (Vector2f(p.x, p.y) * _tileSize) + _offset;
}

std::vector<sf::Vector2ul> LevelSystem::findTiles(LevelSystem::Tile type) {
  auto v = vector<sf::Vector2ul>();
  for (size_t i = 0; i < _width * _height; ++i) {
    if (_tiles[i] == type) {
      v.push_back({i % _width, i / _width});
    }
  }

  return v;
}

LevelSystem::Tile LevelSystem::getTileAt(Vector2f v) {
  auto a = v - _offset;
  if (a.x < 0 || a.y < 0) {
    throw string("Tile out of range ");
  }
  return getTile(Vector2ul((v - _offset) / (_tileSize)));
}

bool LevelSystem::isOnGrid(sf::Vector2f v) {
  auto a = v - _offset;
  if (a.x < 0 || a.y < 0) {
    return false;
  }
  auto p = Vector2ul((v - _offset) / (_tileSize));
  if (p.x > _width || p.y > _height) {
    return false;
  }
  return true;
}

void LevelSystem::setOffset(const Vector2f& _offset) {
  LevelSystem::_offset = _offset;
  buildSprites();
}

void LevelSystem::unload() {
  cout << "LevelSystem unloading\n";
  _sprites.clear();
  _tiles.reset();
  _width = 0;
  _height = 0;
  _offset = {0, 0};
}

const Vector2f& LevelSystem::getOffset() { return _offset; }

float LevelSystem::getTileSize() { return _tileSize; }

// Normal rooms
int LevelSystem::_rooms[16][4][81] =
{
	{
		// █ █
		// █ █ 0
		// ███
		{0,2,37,72,72,72,38,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,61,107,61,107,61,107,63},
		{-1,0,37,72,72,72,38,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,61,107,87,107,61,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,9,32,72,72,72,35,10,-1,-1,20,73,72,72,72,74,23,-1,-1,12,72,72,72,72,72,15,-1,-1,56,85,72,72,72,86,59,-1,-1,76,41,85,72,86,42,79,-1,-1,-1,76,81,107,82,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,4,32,72,72,72,35,7,-1,9,29,73,72,72,72,74,30,10,20,73,72,72,72,72,72,74,23,12,72,72,72,72,72,72,72,15,56,85,72,72,72,72,72,86,59,76,41,85,72,72,72,86,42,79,-1,76,41,85,72,86,42,79,-1,-1,-1,76,81,107,82,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	},
	{
		// ███
		// █   1
		// ███
		{0,2,1,75,1,2,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,26,2,1,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,24,72,72,72,72,72,72,72,72,60,107,36,72,72,72,72,72,39,-1,-1,24,72,72,72,72,72,27,-1,-1,60,107,61,87,61,107,63},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,2,1,2,2,1,2,2,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,24,72,72,72,72,72,72,72,72,60,107,107,61,107,107,61,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,9,45,2,2,2,2,2,2,3,20,73,72,72,72,72,72,72,26,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,51,76,81,107,107,107,107,107,107,78,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,4,45,2,46,7,-1,-1,-1,9,29,73,72,74,30,10,-1,-1,20,73,72,72,72,74,22,2,2,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,86,71,107,107,76,41,85,72,86,42,79,-1,-1,-1,76,81,107,82,79,-1,-1,-1}
	},
	{
		// ███
		// █ █ 2
		// █ █
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,1,2,1,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,36,72,72,72,39,63,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,0,2,2,2,3,-1,-1,-1,0,25,72,72,72,26,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,36,72,72,72,39,63,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,1,2,2,1,2,3,-1,12,72,72,72,72,72,72,15,-1,12,72,72,72,72,72,72,15,-1,12,72,72,72,72,72,72,15,-1,24,72,72,72,72,72,72,27,-1,60,107,36,72,72,72,39,63,-1},
		{-1,9,45,2,2,2,46,10,-1,9,33,73,72,72,72,74,34,10,20,73,72,72,72,72,72,74,23,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,56,85,72,72,72,72,72,86,59,76,93,85,72,72,72,86,94,79,-1,76,44,72,72,72,47,79,-1}
	},
	{
		// ███
		//   █ 3
		// ███
		{-1,-1,5,2,2,2,6,-1,-1,-1,4,17,72,72,72,18,7,-1,2,28,73,72,72,72,74,31,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,27,107,40,85,72,72,72,86,43,63,-1,76,65,72,72,72,66,79,-1,-1,-1,77,107,107,107,78,-1,-1},
		{-1,-1,0,2,2,2,3,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,25,72,72,72,26,2,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,27,107,107,36,72,72,72,39,107,63,-1,-1,24,72,72,72,27,-1,-1,-1,-1,60,107,107,107,63,-1,-1},
		{-1,-1,-1,0,1,2,2,1,3,-1,-1,-1,12,72,72,72,72,15,2,2,1,25,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,27,107,107,61,36,72,72,72,72,15,-1,-1,-1,24,72,72,72,72,27,-1,-1,-1,60,61,107,107,61,63},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,1,2,2,1,2,3,-1,37,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,89,72,72,72,72,72,72,27,-1,77,107,61,107,107,61,107,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	},
	{
		// ███
		//     4
		// ███
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,1,75,1,2,3,-1,2,37,72,72,72,72,72,38,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,89,72,72,72,72,72,90,107,-1,77,107,61,87,61,107,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,75,2,1,2,75,2,1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,61,107,87,107,61,107,87,107,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,4,45,2,1,2,46,7,-1,4,29,73,72,72,72,74,30,7,28,73,72,72,72,72,72,74,31,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,40,85,72,72,72,72,72,86,43,76,41,85,72,72,72,86,42,79,-1,76,81,107,61,107,82,79,-1},
		{-1,9,45,1,75,1,46,10,-1,-1,92,73,72,72,72,72,80,-1,1,16,72,72,83,72,72,19,1,72,72,72,72,95,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,83,72,72,72,72,61,52,72,72,95,72,72,55,61,-1,56,85,72,72,72,86,59,-1,-1,76,81,61,87,61,82,79,-1}
	},
	{
		// █ █
		// █ █ 5
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,36,72,72,72,39,107,63,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{0,2,37,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,38,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,15,60,107,88,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,27,-1,-1,12,72,72,72,91,107,63},
		{-1,9,32,72,72,72,35,10,-1,9,33,73,72,72,72,74,34,10,20,73,72,72,72,72,72,74,23,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,56,85,72,72,72,72,72,86,59,76,93,85,72,72,72,86,94,79,-1,76,44,72,72,72,47,79,-1}
	},
	{
		// █ █
		// █   6
		// ███
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,0,25,72,72,72,26,2,2,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,24,72,72,72,72,72,72,72,-1,60,48,72,72,72,51,107,107,-1,-1,60,107,107,107,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,0,25,72,72,72,26,2,3,-1,12,72,72,72,72,72,72,26,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,39,-1,24,72,72,72,72,72,72,27,-1,60,107,107,107,107,107,107,63},
		{9,45,25,72,72,72,26,46,10,20,73,72,72,72,72,72,74,23,12,72,72,72,72,72,72,72,26,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,39,56,85,72,72,72,72,72,86,59,76,81,107,107,107,107,107,82,79},
		{-1,-1,12,72,72,72,26,2,3,-1,0,25,72,72,72,72,72,15,-1,12,72,72,72,72,72,72,26,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,24,72,72,72,72,72,51,107,-1,60,107,107,107,107,107,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	},
	{
		// ███
		// █   7
		// █ █
		{-1,-1,4,45,2,46,7,-1,-1,-1,4,29,73,72,74,30,7,-1,9,29,73,72,72,72,74,31,2,20,73,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,72,76,41,85,72,72,72,86,43,107,-1,76,53,72,72,72,54,79,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,2,2,2,2,2,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,39,107,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,1,2,75,2,1,2,3,12,72,72,72,72,72,72,72,26,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,24,72,72,72,72,72,72,72,51,60,107,88,72,72,72,91,107,78,-1,-1,12,72,72,72,15,-1,-1},
		{9,45,2,2,2,46,10,-1,-1,20,73,72,72,72,74,80,-1,-1,12,72,72,72,72,72,19,2,2,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,72,76,81,52,72,72,72,55,107,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1}
	},
	{
		// ███
		//   █ 8
		// █ █
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,46,7,-1,-1,-1,-1,-1,72,72,74,30,7,-1,-1,-1,-1,72,72,72,74,30,7,-1,-1,-1,72,72,72,72,74,30,10,-1,-1,107,40,85,72,72,74,23,-1,-1,-1,76,53,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,0,2,75,2,3,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,37,72,72,72,38,2,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,27,107,107,88,72,72,72,91,107,63,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,2,2,2,2,2,3,-1,25,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,36,72,72,72,72,72,72,15,-1,24,72,72,72,72,72,72,27,-1,60,107,36,72,72,72,39,63,-1},
		{-1,4,45,2,2,2,46,7,-1,4,29,73,72,72,72,74,30,10,28,73,72,72,72,72,72,74,23,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,40,85,72,72,72,72,72,86,59,76,41,85,72,72,72,86,42,79,-1,76,53,72,72,72,54,79,-1}
	},
	{
		// █ █
		//   █ 9
		// ███
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,25,72,72,72,26,2,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,107,107,36,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,107,107,107,107,107,63},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,25,72,72,72,15,-1,-1,72,72,72,72,72,72,15,-1,-1,72,72,72,72,72,72,15,-1,-1,72,72,72,72,72,72,27,-1,-1,107,107,107,107,87,107,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,9,32,72,72,72,35,10,-1,-1,20,73,72,72,72,74,23,-1,2,25,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,72,72,72,72,72,72,72,15,-1,107,36,72,72,72,72,72,15,-1,-1,56,85,72,72,72,86,59,-1,-1,76,81,107,107,107,82,79,-1},
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,2,28,73,72,72,72,74,30,10,72,72,72,72,72,72,72,74,23,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,86,59,107,40,85,72,72,72,86,42,79,-1,76,41,85,72,86,42,79,-1,-1,-1,76,81,107,82,79,-1,-1}
	},
	{
		// █ █
		//     10
		// ███
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,1,28,73,72,72,72,74,31,1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,61,107,87,107,61,107,87,107,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,37,72,72,72,38,2,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,61,107,87,107,61,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,0,25,72,72,72,26,2,3,2,37,72,72,72,72,72,72,38,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,88,72,72,72,72,72,72,91,-1,24,72,72,72,72,72,72,27,-1,60,107,107,107,107,107,107,63},
		{-1,-1,12,72,72,72,15,-1,-1,5,2,37,72,72,72,38,2,6,16,72,72,72,72,72,72,72,19,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,64,72,72,72,72,72,72,72,67,77,107,61,107,107,107,61,107,78,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	},
	{
		// █ █
		// █   11
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,3,-1,12,72,72,72,72,72,72,26,2,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,39,107,24,72,72,72,72,72,72,27,-1,60,107,36,72,72,72,39,63,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,38,2,2,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,72,72,72,-1,-1,12,72,72,72,91,107,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,0,25,72,72,72,26,3,-1,-1,12,72,72,72,72,72,26,2,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,24,72,72,72,72,72,51,107,-1,60,36,72,72,72,39,78,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,4,32,72,72,72,35,7,-1,9,29,73,72,72,72,74,30,10,20,73,72,72,72,72,72,74,22,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,86,71,76,41,85,72,72,72,86,42,79,-1,76,44,72,72,72,47,79,-1}
	},
	{
		// ███
		//     12
		// █ █
		{0,2,2,1,2,2,3,-1,-1,12,72,72,72,72,72,15,-1,-1,37,72,72,72,72,72,26,2,1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,61,107,36,72,72,72,72,72,91,-1,-1,12,72,72,72,72,72,27,-1,-1,12,72,72,72,39,107,63},
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,1,2,2,75,2,2,1,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,61,36,72,72,72,39,61,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{0,2,1,2,75,2,1,2,3,12,72,72,72,72,72,72,72,15,25,72,72,72,72,72,72,72,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,36,72,72,72,72,72,72,72,39,24,72,72,72,72,72,72,72,27,60,107,88,72,72,72,91,107,63},
		{-1,4,45,2,2,2,46,7,-1,9,29,73,72,72,72,74,30,10,21,73,72,72,72,72,72,74,22,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,52,72,72,72,55,107,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1}
	},
	{
		// █ █
		//   █ 13
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,1,25,72,72,72,26,1,3,25,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,48,72,72,72,72,72,72,72,27,77,61,36,72,72,72,39,61,63,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,25,72,72,72,15,-1,-1,72,72,72,72,72,72,15,-1,-1,72,72,72,72,72,72,15,-1,-1,72,72,72,72,72,72,15,-1,-1,107,107,36,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,2,28,73,72,72,72,74,30,10,72,72,72,72,72,72,72,74,23,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,86,59,107,40,85,72,72,72,86,42,79,-1,76,53,72,72,72,54,79,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,12,72,72,72,26,2,3,-1,9,32,72,72,72,72,72,15,2,21,73,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,107,68,85,72,72,72,72,72,15,-1,76,44,72,72,72,72,72,27,-1,-1,12,72,72,72,39,107,63}
	},
	{
		// █ █
		//     14
		// █ █
		{-1,4,32,72,72,72,15,-1,-1,9,29,73,72,72,72,15,-1,-1,21,73,72,72,72,72,26,2,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,36,72,72,72,72,86,71,-1,-1,12,72,72,72,86,42,79,-1,-1,12,72,72,72,47,79,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,8,72,72,72,11,-1,-1,2,2,16,72,72,72,19,2,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,52,72,72,72,55,107,107,-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,25,72,72,72,72,72,72,72,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,48,72,72,72,72,72,72,72,51,77,107,36,72,72,72,39,107,78,-1,-1,12,72,72,72,15,-1,-1},
		{9,45,25,72,72,72,26,46,10,20,73,72,72,72,72,72,74,23,25,72,72,72,72,72,72,72,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,36,72,72,72,72,72,72,72,39,56,85,72,72,72,72,72,86,59,76,81,36,72,72,72,39,82,79}
	},
	{
		// Entrance 15
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,9,29,73,72,72,72,74,30,10,20,73,72,72,72,72,72,74,23,12,72,83,72,72,72,83,72,15,56,85,95,72,72,72,95,86,59,76,41,85,72,72,72,86,42,79,-1,76,65,72,72,72,66,79,-1,-1,-1,77,49,84,50,78,-1,-1},
		{0,2,37,72,72,72,38,2,3,12,72,72,72,72,72,72,72,15,12,72,83,72,72,72,83,72,15,12,72,95,72,72,72,95,72,15,12,72,83,72,72,72,83,72,15,12,72,95,72,72,72,95,72,15,24,72,72,72,72,72,72,72,27,60,107,64,72,72,72,67,107,63,-1,-1,77,49,84,50,78,-1,-1},
		{-1,0,25,72,72,72,26,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,107,49,84,50,107,63,-1},
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,12,72,72,72,72,72,72,72,15,12,72,83,72,72,72,83,72,15,12,72,95,72,72,72,95,72,15,56,85,72,72,72,72,72,86,59,76,41,85,72,72,72,86,42,79,-1,76,81,49,84,50,82,79,-1}
	}
};

// Special rooms
int LevelSystem::_specialRooms[11][81] =
{
	// Boss vertical entrance  0
	{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,36,72,72,72,39,107,63,- 1,-1,12,72,72,72,15,-1,-1},

	// Boss horizontal entrance  1
	{1,2},

	// Boss top left  2
	{-1,-1,-1,-1,-1,4,45,2,2,-1,-1,-1,-1,4,29,73,72,72,-1,-1,-1,4,29,73,72,72,72,-1,-1,4,29,73,72,72,72,72,-1,4,29,73,72,72,72,72,72,9,29,73,72,72,72,72,72,72,20,73,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72},

	// Boss bottom left  3
	{12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,72,76,41,85,72,72,72,72,72,72,-1,76,41,85,72,72,72,72,72,-1,-1,76,41,85,72,72,72,72,-1,-1,-1,76,41,85,72,72,72,-1,-1,-1,-1,76,41,85,72,72,-1,-1,-1,-1,-1,76,81,107,107},

	// Boss top right  4
	{2,2,46,7,-1,-1,-1,-1,-1,72,72,74,30,7,-1,-1,-1,-1,72,72,72,74,30,7,-1,-1,-1,72,72,72,72,74,30,7,-1,-1,72,72,72,72,72,74,30,7,-1,72,72,72,72,72,72,74,30,10,72,72,72,72,72,72,72,74,23,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15},
	
	// Boss bottom right  5
	{72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,86,59,72,72,72,72,72,72,86,42,79,72,72,72,72,72,86,42,79,-1,72,72,72,72,86,42,79,-1,-1,72,72,72,86,42,79,-1,-1,-1,72,72,86,42,79,-1,-1,-1,-1,107,107,82,79,-1,-1,-1,-1,-1},

	// Boss top  6
	{2,1,2,2,13,2,2,1,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72},

	// Boss left  7
	{1,2},

	// Boss right  8
	{1,2},

	// Boss bottom  9
	{1,2},

	// Boss middle  10
	{72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,36,72,72,72,39,107,107}
};

// Normal clusters
int LevelSystem::_clusters[15][4][9] =
{
	{
		// █ █
		// █ █ 0
		// ███
		{-1,11,8,-1,6,9,-1,-1,-1},
		{-1,11,3,1,13,-1,-1,0,-1},
		{-1,5,-1,1,14,8,-1,6,9},
		{-1,5,-1,-1,11,8,-1,0,0}
	},
	{
		// ███
		// █   1
		// ███
		{-1,7,8,-1,6,10,-1,-1,-1},
		{-1,-1,2,1,12,10,-1,0,-1},
		{7,8,-1,6,14,4,-1,0,-1},
		{1,8,-1,1,10,4,-1,-1,-1}
	},
	{
		// ███
		// █ █ 2
		// █ █
		{-1,-1,-1,7,8,-1,6,13,-1},
		{-1,2,-1,-1,11,3,1,13,-1},
		{7,8,-1,6,14,3,-1,5,-1},
		{2,2,-1,6,13,-1,-1,5,-1}
	},
	{
		// ███
		//   █ 3
		// ███
		{-1,-1,-1,12,8,-1,6,9,-1},
		{-1,2,-1,12,10,3,0,-1,-1},
		{-1,2,-1,4,14,8,-1,6,9},
		{-1,-1,-1,4,12,3,-1,6,3}
	},
	{
		// ███
		//     4
		// ███
		{-1,2,-1,4,14,4,-1,6,3},
		{7,4,8,13,-1,11,6,4,9},
		{-1,7,8,8,11,10,6,9,-1},
		{-1,2,2,12,10,10,0,-1,-1}
	},
	{
		// █ █
		// █ █ 5
		// █ █
		{-1,5,-1,1,13,-1,-1,5,-1},
		{7,13,-1,11,13,-1,6,13,-1},
		{-1,6,8,7,4,9,6,8,-1},
		{2,5,-1,6,14,8,-1,11,9}
	},
	{
		// █ █
		// █   6
		// ███
		{1,14,8,-1,5,6,-1,0,-1},
		{-1,11,8,-1,6,10,-1,-1,-1},
		{-1,5,-1,7,14,4,6,9,-1},
		{-1,5,-1,-1,6,12,-1,-1,0}
	},
	{
		// ███
		// █   7
		// █ █
		{2,-1,-1,11,12,4,6,13,-1},
		{-1,7,8,-1,11,14,-1,11,9},
		{7,8,-1,11,10,4,6,8,-1},
		{-1,-1,2,-1,-1,11,1,12,9}
	},
	{
		// ███
		//   █ 8
		// █ █
		{7,4,8,9,1,13,-1,7,9},
		{-1,2,-1,12,14,3,0,5,-1},
		{7,12,3,13,0,-1,6,8,-1},
		{-1,7,8,4,13,0,-1,5,-1}
	},
	{
		// █ █
		//   █ 9
		// ███
		{2,6,8,14,12,9,6,9,-1},
		{-1,11,3,4,10,3,-1,-1,-1},
		{-1,5,-1,8,11,3,6,9,-1},
		{7,10,8,13,-1,5,6,4,9}
	},
	{
		// █ █
		//     10
		// ███
		{-1,6,8,4,4,10,-1,-1,-1},
		{7,10,8,13,-1,11,0,-1,0},
		{-1,5,-1,4,14,12,-1,6,9},
		{-1,5,-1,12,9,7,6,4,9}
	},
	{
		// █ █
		// █   11
		// █ █
		{7,10,8,6,8,6,-1,5,-1},
		{1,13,-1,-1,11,4,1,13,-1},
		{-1,5,-1,-1,6,12,1,12,9},
		{-1,5,-1,1,14,4,-1,5,-1}
	},
	{
		// ███
		//     12
		// █ █
		{-1,1,8,4,12,14,-1,5,0},
		{7,8,-1,10,10,12,-1,7,9},
		{-1,7,8,8,5,6,6,13,-1},
		{2,2,-1,10,10,12,-1,7,9}
	},
	{
		// █ █
		//   █ 13
		// █ █
		{-1,6,8,4,12,13,-1,11,9},
		{7,13,-1,13,5,-1,6,13,-1},
		{-1,5,-1,12,10,8,6,8,0},
		{7,9,-1,10,12,8,-1,5,0}
	},
	{
		// █ █
		//     14
		// █ █
		{1,14,3,8,11,4,6,14,3},
		{-1,5,-1,4,14,4,-1,5,-1},
		{-1,11,3,12,13,7,6,14,9},
		{1,10,8,4,4,14,-1,7,9}
	}
};

// Special clusters
int LevelSystem::_specialClusters[2][9] =
{
	// Entrance
	// █ █
	// ███
	// ███
	{-1,15,-1,-1,-1,-1,-1,-1,-1},

	// Boss top
	// █▀█
	// ▌ ▐
	// █ █
	{2,6,4,3,10,5,-1,0,-1},
};
