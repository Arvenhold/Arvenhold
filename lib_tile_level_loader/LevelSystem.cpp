#include "LevelSystem.h"
#include <fstream>
#include <iostream>

using namespace std;
using namespace sf;

std::unique_ptr<LevelSystem::TILE[]> LevelSystem::_tiles;
size_t LevelSystem::_width;
size_t LevelSystem::_height;
Vector2f LevelSystem::_offset(0.0f, 0.0f);

float LevelSystem::_tileSize(8.f);
vector<std::unique_ptr<sf::RectangleShape>> LevelSystem::_sprites;

std::map<LevelSystem::TILE, sf::Color> LevelSystem::_colours{ {WALL, Color::Color(50,50,50)}, {END, Color::Color(120,120,120)} };

sf::Color LevelSystem::getColor(LevelSystem::TILE t) {
    auto it = _colours.find(t);
    if (it == _colours.end()) {
        _colours[t] = Color::Transparent;
    }
    return _colours[t];
}

void LevelSystem::setColor(LevelSystem::TILE t, sf::Color c) {
    auto it = _colours.find(t);
    if (it != _colours.end())
    {
        _colours[t] = c;
    }
}

void LevelSystem::generateDungeon(int level)
{
	int layout[12] = {  -1,16,2,
						7,  10, 13,
					  11, 12,  9,
					   0, 15, -1 };

	std::vector<TILE> temp_tiles;
	temp_tiles.clear();

	srand(time(NULL));

	int offset = rand() % 10;

	int* tCluster;

	for (int dRow = 0; dRow < 4; dRow++)
	{
		for (int cRow = 0; cRow < 3; cRow++)
		{
			for (int rRow = 0; rRow < 9; rRow++)
			{
				for (int dCol = 0; dCol < 3; dCol++)
				{
					if (layout[dCol + dRow * 3] > 14)
					{
						tCluster = _specialClusters[layout[dCol + dRow * 3] - 15];
					}
					else if (layout[dCol + dRow * 3] > -1)
					{
						int rando = ((dCol + dRow * 3 + offset) % 4);
						tCluster = _clusters[layout[dCol + dRow * 3]][rando];
					}

					for (int cCol = 0; cCol < 3; cCol++)
					{
						int rando = ((cCol + cRow * 3 + offset) % 4);

						for (int rCol = 0; rCol < 9; rCol++)
						{
							if (layout[dCol + dRow * 3] > 15)
							{
								if (layout[dCol + dRow * 3] == -1 || tCluster[cCol + cRow * 3] == -1 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == -1)
								{
									temp_tiles.push_back(EMPTY);
								}
								else if (_specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 72 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 73 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 74 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 85 || _specialRooms[tCluster[cCol + cRow * 3]][rCol + rRow * 9] == 86)
								{
									temp_tiles.push_back(END);
								}
								else
								{
									temp_tiles.push_back(WALL);
								}
							}
							else
							{
								if (layout[dCol + dRow * 3] == -1 || tCluster[cCol + cRow * 3] == -1 || _rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == -1)
								{
									temp_tiles.push_back(EMPTY);
								}
								else if (_rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == 72 || _rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == 73 || _rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == 74 || _rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == 85 || _rooms[tCluster[cCol + cRow * 3]][0][rCol + rRow * 9] == 86)
								{
									temp_tiles.push_back(END);
								}
								else
								{
									temp_tiles.push_back(WALL);
								}
							}
						}
					}
				}
			}
		}
	}

	cout << temp_tiles.size() << endl;
	_tiles = std::make_unique<TILE[]>(8748);
	_width = 81; //set static class vars
	_height = 108;
	std::copy(temp_tiles.begin(), temp_tiles.end(), &_tiles[0]);
	std::cout << "Level " << level << " Loaded. " << 27 << "x" << 27 << std::endl;
	buildSprites();
}

int LevelSystem::getHeight()
{
    return _height;
}

int LevelSystem::getWidth()
{
    return _width;
}

void LevelSystem::buildSprites() {
    _sprites.clear();
    for (size_t y = 0; y < LevelSystem::getHeight(); ++y) {
        for (size_t x = 0; x < LevelSystem::getWidth(); ++x) {
            auto s = make_unique<RectangleShape>();
            s->setPosition(getTilePosition({ x, y }));
            s->setSize(Vector2f(_tileSize, _tileSize));
            s->setFillColor(getColor(getTile({ x, y })));
            _sprites.push_back(move(s));
        }
    }
}

Vector2f LevelSystem::getTilePosition(Vector2ul p) {
    return (Vector2f(p.x, p.y) * _tileSize);
}

LevelSystem::TILE LevelSystem::getTile(Vector2ul p) {
    if (p.x > _width || p.y > _height) {
        throw string("Tile out of range: ") + to_string(p.x) + "," + to_string(p.y) + ")";
    }
    return _tiles[(p.y * _width) + p.x];
}

LevelSystem::TILE LevelSystem::getTileAt(Vector2f v) {
    auto a = v - _offset;
    if (a.x < 0 || a.y < 0) {
        throw string("Tile out of range ");
    }
    return getTile(Vector2ul((v - _offset) / (_tileSize)));
}

void LevelSystem::Render(RenderWindow& window) {
    for (size_t i = 0; i < _width * _height; ++i) {
        window.draw(*_sprites[i]);
    }
}

// Normal rooms
int LevelSystem::_rooms[16][4][81] =
{
	{
		// █ █
		// █ █ 0
		// ███
		{0,2,37,72,72,72,38,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,61,107,61,107,61,107,63},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		// █   1
		// ███
		{0,2,1,75,1,2,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,26,2,1,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,24,72,72,72,72,72,72,72,72,60,107,36,72,72,72,72,72,39,-1,-1,24,72,72,72,72,72,27,-1,-1,60,107,61,87,61,107,63},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		// █ █ 2
		// █ █
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,1,2,1,3,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,12,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,36,72,72,72,39,63,-1,-1,-1,12,72,72,72,15,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		//   █ 3
		// ███
		{-1,-1,5,2,2,2,6,-1,-1,-1,4,17,72,72,72,18,7,-1,2,28,73,72,72,72,74,31,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,27,107,40,85,72,72,72,86,43,63,-1,76,65,72,72,72,66,79,-1,-1,-1,77,107,107,107,78,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		//     4
		// ███
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,1,75,1,2,3,-1,2,37,72,72,72,72,72,38,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,89,72,72,72,72,72,90,107,-1,77,107,61,87,61,107,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		// █ █ 5
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,36,72,72,72,39,107,63,-1,-1,12,72,72,72,15,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		// █   6
		// ███
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,-1,0,25,72,72,72,26,2,2,-1,12,72,72,72,72,72,72,72,-1,12,72,72,72,72,72,72,72,-1,24,72,72,72,72,72,72,72,-1,60,48,72,72,72,51,107,107,-1,-1,60,107,107,107,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		// █   7
		// █ █
		{-1,-1,4,45,2,46,7,-1,-1,-1,4,29,73,72,74,30,7,-1,9,29,73,72,72,72,74,31,2,20,73,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,72,76,41,85,72,72,72,86,43,107,-1,76,53,72,72,72,54,79,-1,-1,-1,12,72,72,72,15,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		//   █ 8
		// █ █
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,46,7,-1,-1,-1,-1,-1,72,72,74,30,7,-1,-1,-1,-1,72,72,72,74,30,7,-1,-1,-1,72,72,72,72,74,30,10,-1,-1,107,40,85,72,72,74,23,-1,-1,-1,76,53,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		//   █ 9
		// ███
		{-1,-1,12,72,72,72,15,-1,-1,-1,-1,12,72,72,72,15,-1,-1,2,2,25,72,72,72,26,2,3,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,107,107,36,72,72,72,72,72,15,-1,-1,24,72,72,72,72,72,27,-1,-1,60,107,107,107,107,107,63},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		//     10
		// ███
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,1,28,73,72,72,72,74,31,1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,61,107,87,107,61,107,87,107,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		// █   11
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,3,-1,12,72,72,72,72,72,72,26,2,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,39,107,24,72,72,72,72,72,72,27,-1,60,107,36,72,72,72,39,63,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// ███
		//     12
		// █ █
		{0,2,2,1,2,2,3,-1,-1,12,72,72,72,72,72,15,-1,-1,37,72,72,72,72,72,26,2,1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,61,107,36,72,72,72,72,72,91,-1,-1,12,72,72,72,72,72,27,-1,-1,12,72,72,72,39,107,63},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		//   █ 13
		// █ █
		{-1,-1,12,72,72,72,15,-1,-1,0,1,25,72,72,72,26,1,3,25,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,48,72,72,72,72,72,72,72,27,77,61,36,72,72,72,39,61,63,-1,-1,12,72,72,72,15,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// █ █
		//     14
		// █ █
		{-1,4,32,72,72,72,15,-1,-1,9,29,73,72,72,72,15,-1,-1,21,73,72,72,72,72,26,2,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,36,72,72,72,72,86,71,-1,-1,12,72,72,72,86,42,79,-1,-1,12,72,72,72,47,79,-1},
		{1,2},
		{1,2},
		{1,2}
	},
	{
		// Entrance 15
		{-1,-1,8,72,72,72,11,-1,-1,-1,4,17,72,72,72,18,7,-1,9,29,73,72,72,72,74,30,10,20,73,72,72,72,72,72,74,23,12,72,83,72,72,72,83,72,15,56,85,95,72,72,72,95,86,59,76,41,85,72,72,72,86,42,79,-1,76,65,72,72,72,66,79,-1,-1,-1,77,49,84,50,78,-1,-1},
		{1,2},
		{1,2},
		{1,2}
	}
};

// Special rooms
int LevelSystem::_specialRooms[11][81] =
{
	// Boss vertical entrance  0
	{-1,-1,12,72,72,72,15,-1,-1,0,2,25,72,72,72,26,2,3,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,12,72,72,72,72,72,72,72,15,24,72,72,72,72,72,72,72,27,60,107,36,72,72,72,39,107,63,- 1,-1,12,72,72,72,15,-1,-1},

	// Boss horizontal entrance  1
	{1,2},

	// Boss top left  2
	{-1,-1,-1,-1,-1,4,45,2,2,-1,-1,-1,-1,4,29,73,72,72,-1,-1,-1,4,29,73,72,72,72,-1,-1,4,29,73,72,72,72,72,-1,4,29,73,72,72,72,72,72,9,29,73,72,72,72,72,72,72,20,73,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72},

	// Boss bottom left  3
	{12,72,72,72,72,72,72,72,72,12,72,72,72,72,72,72,72,72,56,85,72,72,72,72,72,72,72,76,41,85,72,72,72,72,72,72,-1,76,41,85,72,72,72,72,72,-1,-1,76,41,85,72,72,72,72,-1,-1,-1,76,41,85,72,72,72,-1,-1,-1,-1,76,41,85,72,72,-1,-1,-1,-1,-1,76,81,107,107},

	// Boss top right  4
	{2,2,46,7,-1,-1,-1,-1,-1,72,72,74,30,7,-1,-1,-1,-1,72,72,72,74,30,7,-1,-1,-1,72,72,72,72,74,30,7,-1,-1,72,72,72,72,72,74,30,7,-1,72,72,72,72,72,72,74,30,10,72,72,72,72,72,72,72,74,23,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15},
	
	// Boss bottom right  5
	{72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,72,15,72,72,72,72,72,72,72,86,59,72,72,72,72,72,72,86,42,79,72,72,72,72,72,86,42,79,-1,72,72,72,72,86,42,79,-1,-1,72,72,72,86,42,79,-1,-1,-1,72,72,86,42,79,-1,-1,-1,-1,107,107,82,79,-1,-1,-1,-1,-1},

	// Boss top  6
	{2,1,2,2,13,2,2,1,2,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72},

	// Boss left  7
	{1,2},

	// Boss right  8
	{1,2},

	// Boss bottom  9
	{1,2},

	// Boss middle  10
	{72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,36,72,72,72,39,107,107}
};

// Normal clusters
int LevelSystem::_clusters[15][4][9] =
{
	{
		// █ █
		// █ █ 0
		// ███
		{-1,11,8,-1,6,9,-1,-1,-1},
		{-1,11,3,1,13,-1,-1,0,-1},
		{-1,5,-1,1,14,8,-1,6,9},
		{-1,5,-1,-1,11,3,-1,0,0}
	},
	{
		// ███
		// █   1
		// ███
		{-1,7,8,-1,6,10,-1,-1,-1},
		{-1,-1,2,1,12,10,-1,0,-1},
		{7,8,-1,6,14,4,-1,0,-1},
		{1,8,-1,1,10,4,-1,-1,-1}
	},
	{
		// ███
		// █ █ 2
		// █ █
		{-1,-1,-1,7,8,-1,6,13,-1},
		{-1,2,-1,-1,11,3,1,13,-1},
		{7,8,-1,6,14,3,-1,5,-1},
		{2,2,-1,6,13,-1,-1,5,-1}
	},
	{
		// ███
		//   █ 3
		// ███
		{-1,-1,-1,12,8,-1,6,9,-1},
		{-1,2,-1,4,10,3,0,-1,-1},
		{-1,2,-1,4,14,8,-1,6,9},
		{-1,-1,-1,4,12,3,-1,6,3}
	},
	{
		// ███
		//     4
		// ███
		{-1,2,-1,4,14,4,-1,6,3},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		// █ █ 5
		// █ █
		{-1,5,-1,1,13,-1,-1,5,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		// █   6
		// ███
		{1,14,8,-1,5,6,-1,0,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// ███
		// █   7
		// █ █
		{2,-1,-1,11,12,4,6,13,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// ███
		//   █ 8
		// █ █
		{7,4,8,9,1,13,-1,7,9},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		//   █ 9
		// ███
		{2,6,8,14,12,9,6,9,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		//     10
		// ███
		{-1,6,8,4,4,10,-1,-1,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		// █   11
		// █ █
		{7,10,8,6,8,6,-1,5,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// ███
		//     12
		// █ █
		{-1,-1,-1,4,12,4,-1,5,-1},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		//   █ 13
		// █ █
		{-1,6,8,4,12,13,-1,11,9},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	},
	{
		// █ █
		//     14
		// █ █
		{1,14,3,8,11,4,6,14,3},
		{1,1,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,2,2,2},
		{3,3,3,3,3,3,3,3,3}
	}
};

// Special clusters
int LevelSystem::_specialClusters[2][9] =
{
	// Entrance
	// █ █
	// ███
	// ███
	{-1,15,-1,-1,-1,-1,-1,-1,-1},

	// Boss top
	// █▀█
	// ▌ ▐
	// █ █
	{2,6,4,3,10,5,-1,0,-1},
};